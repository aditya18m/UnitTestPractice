        -:    0:Source:Password.cpp
        -:    0:Graph:Password.gcno
        -:    0:Data:Password.gcda
        -:    0:Runs:1
        -:    1:#include "Password.h"
        -:    2:#include <string>
        -:    3:#include <algorithm>
        -:    4:#include <cctype>
        -:    5:#include <vector>
        -:    6:
        -:    7:using std::string;
        -:    8:using std::vector;
        -:    9:
        -:   10:
function _ZN8PasswordC2Ev called 22 returned 100% blocks executed 53%
       22:   11:Password::Password() {
call    0 returned 22
       22:   12:    pass_history.push_back("ChicoCA-95929");
call    0 returned 22
call    1 returned 22
branch  2 taken 22 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 22
branch  5 taken 22 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 22
call    8 returned 22
call    9 never executed
call   10 never executed
       22:   13:}
call    0 never executed
        -:   14:/*
        -:   15:  The function receives a string counts how many times the same character 
        -:   16:  occurs at the beginning of the string, before any other characters (or the
        -:   17:  end of the string). The function is case-sensitive so 'Z' is different than
        -:   18:  'z' and any ASCII characters are allowed.
        -:   19:*/
function _ZN8Password24count_leading_charactersENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 18 returned 100% blocks executed 100%
       18:   20:int Password::count_leading_characters(string phrase) {
       18:   21:    if (phrase.empty()) {
call    0 returned 18
branch  1 taken 2 (fallthrough)
branch  2 taken 16
        2:   22:        return 0;
        -:   23:    }
       16:   24:    int repetition = 1;
       16:   25:    int index = 0;
       27:   26:    while (index < phrase.length()-1 && phrase[index] == phrase[index+1]) {
call    0 returned 27
branch  1 taken 23 (fallthrough)
branch  2 taken 4
call    3 returned 23
call    4 returned 23
branch  5 taken 11 (fallthrough)
branch  6 taken 12
branch  7 taken 11
branch  8 taken 16 (fallthrough)
       11:   27:        repetition++;
       11:   28:        index++;
        -:   29:    }
       16:   30:    return repetition;
        -:   31:}
        -:   32:
        -:   33:// Implementation A
        -:   34:// #include <cctype>
        -:   35:// bool Password::has_mixed_case(string str)
        -:   36:// {
        -:   37://   bool has_lower = false;
        -:   38://   bool has_upper = false;
        -:   39://   for (char ch : str)
        -:   40://   {
        -:   41://     if (std::islower(ch))
        -:   42://     {
        -:   43://       has_lower = true;
        -:   44://     }
        -:   45://     else if (std::isupper(ch))
        -:   46://     {
        -:   47://       has_upper = true;
        -:   48://     }
        -:   49://   }
        -:   50://   return has_lower && has_upper;
        -:   51:// }
        -:   52:// Implementation B
        -:   53:// bool Password::has_mixed_case(string str)
        -:   54:// {
        -:   55://   int count_lower = 0;
        -:   56://   for (int i = 0; i < str.length(); i++)
        -:   57://   {
        -:   58://     if (str[i] >= 'a' && str[i] <= 'z')
        -:   59://     {
        -:   60://       count_lower++;
        -:   61://     }
        -:   62://   }
        -:   63://   return count_lower > 0 && count_lower < str.length();
        -:   64:// }
        -:   65:// Implementation C
        -:   66:// bool Password::has_mixed_case(string str)
        -:   67:// {
        -:   68://   bool lower = false;
        -:   69://   bool upper = false;
        -:   70://   for (int i = 0; i < str.length(); i++)
        -:   71://   {
        -:   72://     if (str[i] >= 'a' && str[i] <= 'z')
        -:   73://     {
        -:   74://       lower = true;
        -:   75://     }
        -:   76://     else if (str[i] >= 'A' && str[i] <= 'Z')
        -:   77://     {
        -:   78://       upper = true;
        -:   79://     }
        -:   80://   }
        -:   81://   return upper && lower;
        -:   82:// }
        -:   83:// Implementation D
        -:   84:// #include <cctype>
        -:   85:// bool Password::has_mixed_case(string str)
        -:   86:// {
        -:   87://   bool is_lower = false;
        -:   88://   bool is_upper = false;
        -:   89://   for (char c : str)
        -:   90://   {
        -:   91://     if (std::islower(c))
        -:   92://     {
        -:   93://       is_lower = true;
        -:   94://     }
        -:   95://     else
        -:   96://     {
        -:   97://       is_upper = true;
        -:   98://     }
        -:   99://   }
        -:  100://   return is_lower && is_upper;
        -:  101:// }
        -:  102:// Implementation E
function _ZN8Password14has_mixed_caseENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 10 returned 100% blocks executed 100%
       10:  103:bool Password::has_mixed_case(string str)
        -:  104:{
       10:  105:  bool found = false;
       40:  106:  for(char c : str){
call    0 returned 10
call    1 returned 10
call    2 returned 36
call    3 returned 30
call    4 returned 40
branch  5 taken 36
branch  6 taken 4 (fallthrough)
       36:  107:    if( !found && c >= 'A' && c <= 'Z' ){
branch  0 taken 26 (fallthrough)
branch  1 taken 10
branch  2 taken 26 (fallthrough)
branch  3 taken 0
branch  4 taken 8 (fallthrough)
branch  5 taken 18
        8:  108:      found = true;
        -:  109:    }
       36:  110:    if( found && c >= 'a' && c <= 'z'){
branch  0 taken 18 (fallthrough)
branch  1 taken 18
branch  2 taken 6 (fallthrough)
branch  3 taken 12
branch  4 taken 6 (fallthrough)
branch  5 taken 0
        6:  111:      return true;
        -:  112:    }
        -:  113:  }
        4:  114:  return false;
        -:  115:}
        -:  116:
function _ZN8Password3setENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 10 returned 100% blocks executed 90%
       10:  117:void Password::set(string new_password) {
       10:  118:    if (new_password.length() < 8 || new_password.length() > 20)
call    0 returned 10
branch  1 taken 9 (fallthrough)
branch  2 taken 1
call    3 returned 9
branch  4 taken 1 (fallthrough)
branch  5 taken 8
branch  6 taken 2 (fallthrough)
branch  7 taken 8
        2:  119:        return;
        -:  120:  
        8:  121:    if (count_leading_characters(new_password) > 3)
call    0 returned 8
call    1 returned 8
branch  2 taken 8 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 8
branch  5 taken 1 (fallthrough)
branch  6 taken 7
call    7 never executed
call    8 never executed
        1:  122:        return;
        -:  123:  
        7:  124:    if (!has_mixed_case(new_password))
call    0 returned 7
call    1 returned 7
call    2 returned 7
branch  3 taken 1 (fallthrough)
branch  4 taken 6
        1:  125:        return;
        -:  126:  
        6:  127:    if (std::find(pass_history.begin(), pass_history.end(), new_password) != pass_history.end())
call    0 returned 6
call    1 returned 6
call    2 returned 6
call    3 returned 6
branch  4 taken 6 (fallthrough)
branch  5 taken 0 (throw)
call    6 returned 6
branch  7 taken 1 (fallthrough)
branch  8 taken 5
        1:  128:        return;
        -:  129:  
        5:  130:    pass_history.push_back(new_password);
call    0 returned 5
        -:  131:}
        -:  132:
function _ZN8Password12authenticateENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 11 returned 100% blocks executed 83%
       11:  133:bool Password::authenticate(string test_password) {
       11:  134:    if (pass_history.empty())
call    0 returned 11
branch  1 taken 0 (fallthrough)
branch  2 taken 11
    #####:  135:        return false;
        -:  136:  
       11:  137:    return test_password == pass_history.back();
call    0 returned 11
call    1 returned 11
        -:  138:}
